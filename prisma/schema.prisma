// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  user_id  String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  username String
  password String
  role     RoleType @default(USER)

  Rental    Rental[]
  CarReview CarReview[]
  @@map("Users")
}

enum RoleType {
  USER
  ADMIN
}

// name : Type.String(),
// 	id: Type.String({ format: 'uuid' }),
// 	rentalDate: Type.Number(Date),
// 	returnDate: Type.Number(Date),
// 	carId: Type.String(car),

model Rental {
  rental_id  String   @id @default(auto()) @map("_id") @db.ObjectId
  User       User?    @relation(fields: [user_id], references: [user_id])
  user_id    String
  rentalDate DateTime @default(now())
  returnDate DateTime
  Car        Car?     @relation(fields: [car_id], references: [car_id])
  car_id     String


  Payment Payment[]
  @@map("Rentals")
}

// const Car = Type.Object({
// 	id: Type.String({ format: 'uuid', $id: 'car' }),
// 	name: Type.String(),
// 	carBrand: Type.String(),
// 	color: Type.String(),
// 	capacity: Type.Number(),
// 	model: Type.Number(),

model Car {
  car_id   String   @id @default(auto()) @map("_id") @db.ObjectId
  carName  String
  carBrand String
  color    String
  capacity Int
  model    Int
  Rental   Rental[]

  CarReview CarReview[]
  @@map("Cars")
  CarImage CarImage[]
}

// const Payment = Type.Object({
// 	id: Type.String({ format: 'uuid', $id: 'car' }),
// 	paymentId: Type.String(),
// 	paymentDate: Type.String(Date),
// 	rentalId: Type.String(),
// 	paymentAmount: Type.Number()

model Payment {
  payment_id    String   @id @default(auto()) @map("_id") @db.ObjectId
  Rental        Rental?  @relation(fields: [rental_id], references: [rental_id])
  rental_id     String
  paymentDate   DateTime @default(now())
  paymentAmount Int

  @@map("Payments")
}

// const CarReview = Type.Object({
// 	id: Type.String({ format: 'uuid' }),
// 	review: Type.String(),
// 	ReviewScore: Type.Number(),
// 	date: Type.Integer(Date),
// 	customerId: Type.String(user),
// 	carId: Type.String(car)

model CarReview {
  review_id   String   @id @default(auto()) @map("_id") @db.ObjectId
  review      String
  reviewScore Float
  reviewDate  DateTime @default(now())
  User        User?    @relation(fields: [user_id], references: [user_id])
  user_id     String
  Car         Car?     @relation(fields: [car_id], references: [car_id])
  car_id      String

  @@map("Car Reviews")
}

// const carImage = Type.Object({
// 	id: Type.String({ format: 'uuid',  $id: 'user'  }),
// 	imageDescription: Type.String(),
// 	carId: Type.String(car),

model CarImage {
  image_id         String @id @default(auto()) @map("_id") @db.ObjectId
  imageDescription String
  Car              Car?   @relation(fields: [car_id], references: [car_id])
  car_id           String

  @@map("Car Images")
}
